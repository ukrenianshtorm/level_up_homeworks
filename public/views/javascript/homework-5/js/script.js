'use strict';
// --------------------------
// Вычислить сумму чисел до данного
// важность: 5
// Напишите функцию sumTo(n), которая для данного n вычисляет сумму чисел от 1 до n, например:
// sumTo(1) = 1
// sumTo(2) = 2 + 1 = 3
// sumTo(3) = 3 + 2 + 1 = 6
// sumTo(4) = 4 + 3 + 2 + 1 = 10
// ...
// sumTo(100) = 100 + 99 + ... + 2 + 1 = 5050
// Сделайте три варианта решения:
// С использованием цикла.
// Через рекурсию, т.к.sumTo(n) = n + sumTo(n - 1) для n > 1.
// С использованием формулы для суммы арифметической прогрессии.
// Пример работы вашей функции:
// function sumTo(n) { /*... ваш код ... */ }
// alert(sumTo(100)); // 5050
// Какой вариант решения самый быстрый ? Самый медленный ? Почему ?
//   Можно ли при помощи рекурсии посчитать sumTo(100000) ? Если нет, то почему ?
// --------------------------
// function sumTo(value) {
//   let j = 0;

//   for (let i = 1; i <= value; i += 1) {
//     j += i;
//   }
//   return j;
// }
// console.log('sumTo :', sumTo(100000));
// function sumTo(n) {
//   if (n > 1) {
//     return n + sumTo(n - 1)
//   }
//   return n;
// }
// console.log('sumTo :', sumTo(30000));
// function sumTo(n) {
//   return n = n * (n + 1) / 2;
// }
// console.log('sumTo :', sumTo(4));
// Решение по формуле быстрее всего, потом цикл за ним уже рекурсия, чем меньше операций тем скорее вычисление! В рекурсии sumTo(100000) ошибка потому что ограничено число вложений 10000 в браузере!
// --------------------------
// Вычислить факториал
// важность: 4
// Факториал числа – это число, умноженное на «себя минус один», затем на «себя минус два» и так далее, до единицы.Обозначается n!
// Определение факториала можно записать как:
// n! = n * (n - 1) * (n - 2) * ...* 1
// Примеры значений для разных n:
// 1! = 1
// 2! = 2 * 1 = 2
// 3! = 3 * 2 * 1 = 6
// 4! = 4 * 3 * 2 * 1 = 24
// 5! = 5 * 4 * 3 * 2 * 1 = 120
// Задача – написать функцию factorial(n), которая возвращает факториал числа n! , используя рекурсивный вызов.
//   alert(factorial(5)); // 120
// Подсказка: обратите внимание, что n! можно записать как n * (n - 1)!.Например: 3! = 3 * 2! = 3 * 2 * 1! = 6
// function factorial(n) {
//   if (n > 1) {
//     return n * factorial(n - 1)
//   }
//   return n;
// }
// console.log('factorial :', factorial(5));
// --------------------------
// Числа Фибоначчи
// важность: 5
// Последовательность чисел Фибоначчи имеет формулу Fn = Fn - 1 + Fn - 2. То есть, следующее число получается как сумма двух предыдущих.
// Первые два числа равны 1, затем 2(1 + 1), затем 3(1 + 2), 5(2 + 3) и так далее: 1, 1, 2, 3, 5, 8, 13, 21....
// Числа Фибоначчи тесно связаны с золотым сечением и множеством природных явлений вокруг нас.
// Напишите функцию fib(n), которая возвращает n - е число Фибоначчи.Пример работы:
// function fib(n) { /* ваш код */ }
// alert(fib(3)); // 2
// alert(fib(7)); // 13
// alert(fib(77)); // 5527939700884757

function fib(n) {
  var j = 0;
  var x = 0;
  var y = 0;

  for (var i = 1; i <= n; i++) {

    if (i == 1) {
      j = 1;
      x = 1;

    } else {
      j = j + x;
      y = j;
      j = x;
      x = y;
    }
  }
  return j;
}
console.log('fib :', fib(77));
// --------------------------
// --------------------------
// --------------------------
// --------------------------
// --------------------------
// --------------------------
// --------------------------
// --------------------------
// --------------------------